{"version":3,"sources":["webpack:///angular-query-builder.js","webpack:///webpack/bootstrap 891a5edc4cc80624dfe5","webpack:///./src/angular-query-builder.js","webpack:///./src/query-builder-group-directive.html"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_queryBuilderGroupDirective","_queryBuilderGroupDirective2","queryBuilder","restrict","scope","options","template","link","format","group","part","i","rules","length","operator","value","push","el","field","name","condition","data","firstKey","pop","defaults","operators","conditions","angular","extend","_query","$watch","query","queryBuilderGroup","$compile","templateUrl","compile","element","attrs","compiledContents","content","contents","remove","addCondition","fields","removeCondition","index","splice","addGroup","removeGroup","$parent","$index","clone","append","$inject","directive","path","html","window","run","put"],"mappings":"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","file":"angular-query-builder.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/* injects from baggage-loader */\n\t\n\t'use strict';\n\t\n\tvar _queryBuilderGroupDirective = __webpack_require__(1);\n\t\n\tvar _queryBuilderGroupDirective2 = _interopRequireDefault(_queryBuilderGroupDirective);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t(function () {\n\t    'use strict';\n\t\n\t    queryBuilderGroup.$inject = [\"$compile\"];\n\t    angular.module('ngQueryBuilder', []).directive('queryBuilder', queryBuilder).directive('queryBuilderGroup', queryBuilderGroup);\n\t\n\t    function queryBuilder() {\n\t        return {\n\t            restrict: 'AE',\n\t            scope: {\n\t                options: '=queryBuilder'\n\t            },\n\t            template: '<div query-builder-group=\"options\" group=\"options._query.group\"></div>',\n\t            link: function link(scope) {\n\t                var defaults = {\n\t                    operators: [{ name: 'AND', value: '$and' }, { name: 'OR', value: '$or' }],\n\t                    conditions: [{ name: 'equal', value: '$eq' }, { name: 'is not equal', value: '$neq' }, { name: 'less than', value: '$lt' }, { name: 'less than or equal', value: '$lte' }, { name: 'greater than', value: '$gt' }, { name: 'greater than or equal', value: '$gte' }]\n\t                };\n\t\n\t                scope.options = angular.extend({}, defaults, scope.options);\n\t\n\t                scope.options._query = {\n\t                    'group': {\n\t                        'operator': scope.options.operators[0],\n\t                        'rules': []\n\t                    }\n\t                };\n\t\n\t                scope.format = format;\n\t\n\t                function format(group) {\n\t                    var obj = {};\n\t                    var part = [];\n\t\n\t                    for (var i = 0; i < group.rules.length; i++) {\n\t                        obj[group.operator.value] = part;\n\t\n\t                        if (group.rules[i].group) {\n\t                            part.push(format(group.rules[i].group));\n\t                        } else {\n\t                            var el = {};\n\t                            el[group.rules[i].field.name] = {};\n\t                            el[group.rules[i].field.name][group.rules[i].condition.value] = group.rules[i].data;\n\t                            part.push(el);\n\t                        }\n\t                    }\n\t\n\t                    for (var firstKey in obj) {\n\t                        break;\n\t                    }if (firstKey && obj[firstKey].length < 2) {\n\t                        obj = obj[firstKey].pop();\n\t                    }\n\t\n\t                    return obj;\n\t                }\n\t\n\t                scope.$watch('options._query', function (query) {\n\t                    scope.options.query = scope.format(query.group);\n\t                }, true);\n\t            }\n\t        };\n\t    }\n\t\n\t    function queryBuilderGroup($compile) {\n\t        'ngInject';\n\t\n\t        return {\n\t            restrict: 'AE',\n\t            scope: {\n\t                group: '=',\n\t                options: '=queryBuilderGroup'\n\t            },\n\t            templateUrl: _queryBuilderGroupDirective2.default,\n\t            compile: function compile(element, attrs) {\n\t                var compiledContents;\n\t                var content = element.contents().remove();\n\t\n\t                return function (scope, element, attrs) {\n\t                    scope.addCondition = addCondition;\n\t                    scope.removeCondition = removeCondition;\n\t                    scope.addGroup = addGroup;\n\t                    scope.removeGroup = removeGroup;\n\t\n\t                    function addCondition() {\n\t                        scope.group.rules.push({\n\t                            condition: scope.options.conditions[0],\n\t                            field: scope.options.fields[0],\n\t                            data: ''\n\t                        });\n\t                    }\n\t\n\t                    function removeCondition(index) {\n\t                        scope.group.rules.splice(index, 1);\n\t                    }\n\t\n\t                    function addGroup() {\n\t                        scope.group.rules.push({\n\t                            group: {\n\t                                operator: scope.options.operators[0],\n\t                                rules: []\n\t                            }\n\t                        });\n\t                    }\n\t\n\t                    function removeGroup() {\n\t                        'group' in scope.$parent && scope.$parent.group.rules.splice(scope.$parent.$index, 1);\n\t                    }\n\t\n\t                    if (!compiledContents) {\n\t                        compiledContents = $compile(content);\n\t                    }\n\t\n\t                    compiledContents(scope, function (clone) {\n\t                        element.append(clone);\n\t                    });\n\t                };\n\t            }\n\t        };\n\t    }\n\t})();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tvar path = '/src/query-builder-group-directive.html';\n\tvar html = \"<div class=\\\"alert alert-info\\\"> <div class=form-inline> <select ng-options=\\\"o.name for o in options.operators\\\" ng-model=group.operator class=\\\"form-control input-sm\\\"></select> <button ng-click=addCondition() class=\\\"btn btn-sm btn-success\\\"><span class=\\\"glyphicon glyphicon-plus-sign\\\"></span> Add Condition</button> <button ng-click=addGroup() class=\\\"btn btn-sm btn-success\\\"><span class=\\\"glyphicon glyphicon-plus-sign\\\"></span> Add Group</button> <button ng-click=removeGroup() class=\\\"btn btn-sm btn-danger\\\"><span class=\\\"glyphicon glyphicon-minus-sign\\\"></span> Remove Group</button> </div> <div class=query-builder-group> <div ng-repeat=\\\"rule in group.rules | orderBy:'index'\\\" class=query-builder-condition> <div ng-switch=\\\"rule.hasOwnProperty('group')\\\"> <div ng-switch-when=true> <div query-builder-group=options group=rule.group></div> </div> <div ng-switch-default> <div class=form-inline> <select ng-options=\\\"f.name for f in options.fields\\\" ng-model=rule.field class=\\\"form-control input-sm\\\"></select> <select ng-options=\\\"c.name for c in options.conditions\\\" ng-model=rule.condition class=\\\"form-control input-sm\\\"></select> <input type=text ng-model=rule.data class=\\\"form-control input-sm\\\"/> <button ng-click=removeCondition($index) class=\\\"btn btn-sm btn-danger\\\"><span class=\\\"glyphicon glyphicon-minus-sign\\\"></span></button> </div> </div> </div> </div> </div> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** angular-query-builder.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 891a5edc4cc80624dfe5\n **/","import queryBuilderGroupDirectiveTpl from './query-builder-group-directive.html';\n\n(function () {\n    'use strict';\n\n    angular.module('ngQueryBuilder', [])\n        .directive('queryBuilder', queryBuilder)\n        .directive('queryBuilderGroup', queryBuilderGroup);\n\n    function queryBuilder() {\n        return {\n            restrict: 'AE',\n            scope: {\n                options: '=queryBuilder',\n            },\n            template: '<div query-builder-group=\"options\" group=\"options._query.group\"></div>',\n            link: function (scope) {\n                var defaults = {\n                    operators: [\n                        { name: 'AND', value: '$and' },\n                        { name: 'OR', value: '$or' },\n                    ],\n                    conditions: [\n                        { name: 'equal', value: '$eq' },\n                        { name: 'is not equal', value: '$neq' },\n                        { name: 'less than', value: '$lt' },\n                        { name: 'less than or equal', value: '$lte' },\n                        { name: 'greater than', value: '$gt' },\n                        { name: 'greater than or equal', value: '$gte' },\n                    ],\n                };\n\n                scope.options = angular.extend({}, defaults, scope.options);\n\n                scope.options._query = {\n                    'group': {\n                        'operator': scope.options.operators[0],\n                        'rules': [],\n                    },\n                };\n\n                scope.format = format;\n\n                function format(group) {\n                    var obj = {};\n                    var part = [];\n\n                    for (var i = 0; i < group.rules.length; i++) {\n                        obj[group.operator.value] = part;\n\n                        if (group.rules[i].group) {\n                            part.push(format(group.rules[i].group));\n                        }\n                        else {\n                            var el = {};\n                            el[group.rules[i].field.name] = {};\n                            el[group.rules[i].field.name][group.rules[i].condition.value] = group.rules[i].data;\n                            part.push(el);\n                        }\n                    }\n\n                    for (var firstKey in obj) break;\n\n                    if (firstKey && obj[firstKey].length < 2) {\n                        obj = obj[firstKey].pop();\n                    }\n\n                    return obj;\n                }\n\n                scope.$watch('options._query', function (query) {\n                    scope.options.query = scope.format(query.group);\n                }, true);\n            },\n        }\n    }\n\n    function queryBuilderGroup($compile) {\n        'ngInject';\n\n        return {\n            restrict: 'AE',\n            scope: {\n                group: '=',\n                options: '=queryBuilderGroup',\n            },\n            templateUrl: queryBuilderGroupDirectiveTpl,\n            compile: function (element, attrs) {\n                var compiledContents;\n                var content = element.contents().remove();\n\n                return function (scope, element, attrs) {\n                    scope.addCondition = addCondition;\n                    scope.removeCondition = removeCondition;\n                    scope.addGroup = addGroup;\n                    scope.removeGroup = removeGroup;\n\n                    function addCondition() {\n                        scope.group.rules.push({\n                            condition: scope.options.conditions[0],\n                            field: scope.options.fields[0],\n                            data: '',\n                        });\n                    }\n\n                    function removeCondition(index) {\n                        scope.group.rules.splice(index, 1);\n                    }\n\n                    function addGroup() {\n                        scope.group.rules.push({\n                            group: {\n                                operator: scope.options.operators[0],\n                                rules: [],\n                            }\n                        });\n                    }\n\n                    function removeGroup() {\n                        'group' in scope.$parent && scope.$parent.group.rules.splice(scope.$parent.$index, 1);\n                    }\n\n                    if (!compiledContents) {\n                        compiledContents = $compile(content)\n                    }\n\n                    compiledContents(scope, function(clone){\n                        element.append(clone);\n                    });\n                }\n            }\n        };\n    }\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/angular-query-builder.js\n **/","var path = '/src/query-builder-group-directive.html';\nvar html = \"<div class=\\\"alert alert-info\\\"> <div class=form-inline> <select ng-options=\\\"o.name for o in options.operators\\\" ng-model=group.operator class=\\\"form-control input-sm\\\"></select> <button ng-click=addCondition() class=\\\"btn btn-sm btn-success\\\"><span class=\\\"glyphicon glyphicon-plus-sign\\\"></span> Add Condition</button> <button ng-click=addGroup() class=\\\"btn btn-sm btn-success\\\"><span class=\\\"glyphicon glyphicon-plus-sign\\\"></span> Add Group</button> <button ng-click=removeGroup() class=\\\"btn btn-sm btn-danger\\\"><span class=\\\"glyphicon glyphicon-minus-sign\\\"></span> Remove Group</button> </div> <div class=query-builder-group> <div ng-repeat=\\\"rule in group.rules | orderBy:'index'\\\" class=query-builder-condition> <div ng-switch=\\\"rule.hasOwnProperty('group')\\\"> <div ng-switch-when=true> <div query-builder-group=options group=rule.group></div> </div> <div ng-switch-default> <div class=form-inline> <select ng-options=\\\"f.name for f in options.fields\\\" ng-model=rule.field class=\\\"form-control input-sm\\\"></select> <select ng-options=\\\"c.name for c in options.conditions\\\" ng-model=rule.condition class=\\\"form-control input-sm\\\"></select> <input type=text ng-model=rule.data class=\\\"form-control input-sm\\\"/> <button ng-click=removeCondition($index) class=\\\"btn btn-sm btn-danger\\\"><span class=\\\"glyphicon glyphicon-minus-sign\\\"></span></button> </div> </div> </div> </div> </div> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/query-builder-group-directive.html\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}